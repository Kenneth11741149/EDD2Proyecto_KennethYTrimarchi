/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edd2_kennethytrimarchi_proyecto;

import com.sun.javafx.property.adapter.PropertyDescriptor;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.RandomAccessFile;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.CellEditor;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Kenneth Van Yableth
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form TestFrame1
     */
    public GUI() {
        initComponents();
        //Creating temporary or permanent metadata depending on user input.
        metadata = new Metadata();
        //Setting up table default design.
        this.setLocationRelativeTo(null);
        Table.setForeground(Color.BLACK);
        Table.setBackground(Color.WHITE);
        Table.setFont(new Font("", 1, 22));
        Table.setRowHeight(30);
        Table.putClientProperty("terminateEditOnFocusLost", true);
        cleanTable = Table.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPanel1FocusLost(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 0, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel3.setBackground(new java.awt.Color(0, 204, 204));
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Export to Excel");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Special Features");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Pre-Alpha V 1.94");

        jPanel4.setBackground(new java.awt.Color(0, 204, 204));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Export to XML");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(0, 204, 204));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );

        jPanel6.setBackground(new java.awt.Color(0, 204, 204));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 55, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(29, 29, 29))
        );

        jButton1.setBackground(new java.awt.Color(102, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons8_menu_32px.png"))); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jScrollPane1.setOpaque(false);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jMenuBar1.setBorder(null);

        jMenu1.setText("File");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Save");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Load");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("New");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Close");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Campos");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Crear Campo");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Modificar Campo");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Borrar Campo");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Listar en consola");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Registros");

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("Crear Registro");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuItem11.setText("Borrar Registro");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        int posicion = jButton1.getX();
        //System.out.println(posicion);
        if (posicion > 5) {
            //Al metiche que este leyendo esto por favor salir de aqui.
            Animacion.Animacion.mover_izquierda(160, 1, 18, 6, jButton1);
            Animacion.Animacion.mover_izquierda(2, -155, 18, 6, jPanel2);
            Animacion.Animacion.mover_izquierda(300, 102, 18, 6, jScrollPane1);
            //Animacion.Animacion.mover_izquierda(posicion, num, ERROR,DELAY, rootPane);
            jScrollPane1.setSize(817, 499);
            jScrollPane1.updateUI();
            //System.out.println(posicion2);
        } else {
            //Metiche favor deja de leer
            Animacion.Animacion.mover_derecha(1, 160, 18, 6, jButton1);
            Animacion.Animacion.mover_derecha(-155, 2, 18, 6, jPanel2);
            Animacion.Animacion.mover_derecha(102, 300, 18, 6, jScrollPane1);
            jScrollPane1.setSize(619, 499);
            jScrollPane1.updateUI();
        }
    }//GEN-LAST:event_jButton1MouseClicked


    private void jPanel1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1FocusLost

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        if (metadata.getNumregistros() == 0) {
            try {
                metodos.CreateCampos(metadata);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            BuildTable(metadata, 0);
        } else {
            JOptionPane.showMessageDialog(null, "Invalid Operation.");
        }

    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        if (metadata.getNumregistros() == 0 && metadata.getCampos() != null) {
            try {
                if (metadata.getCampos().size() == 0) {

                } else {
                    metodos.ModificarCampos(metadata);
                    BuildTable(metadata, 0);
                }

            } catch (Exception e) {

            }

        } else {
            JOptionPane.showMessageDialog(null, "Invalid Operation");
        }

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        if (metadata.getNumregistros() == 0 && metadata.getCampos() != null) {
            try {
                if (metadata.getCampos().size() == 0) {
                    JOptionPane.showMessageDialog(null, "Invalid Operation");
                } else {
                    metodos.DeleteCampos(metadata);
                    BuildTable(metadata, 0);
                }

            } catch (Exception e) {
                System.out.println("Crash Prevented on Illegal operation.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Invalid Operation");
        }

    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        metodos.ListCampos(metadata);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        NewFile();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        if (metadata != null) {
            if (metadata.getCampos() != null) {
                if (metadata.getCampos().size() > 0) {
                    if (file == null) {
                        while (FileSuccess == 0) {
                            CreateFile();

                        }
                        metadata.addnumregistros();
                        try {
                            EscribirMetadatos();
                        } catch (IOException ex) {
                            ex.printStackTrace();
                            System.out.println("Otro de los mil errores escribiendo metadatas.");
                        }
                        CrearRegistro();
                    } else {
                        if (metadata.getNumregistros() < 1) {
                            try{
                                file.delete();
                                file.createNewFile();
                                System.out.println("Forcing deletion and recreation of the file.");
                            }catch(Exception sdj){
                                System.out.println("Error en la puteria de borrar.");
                            }
                            metadata.addnumregistros();
                            try {
                                EscribirMetadatos();
                            } catch (IOException ex) {
                                ex.printStackTrace();
                            }
                            CrearRegistro();
                        } else {
                            metadata.addnumregistros();
                            CrearRegistro();
                        }

                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No hay campos creados! XTT 428");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay campos creados! XTT 431");
            }

        } else {
            JOptionPane.showMessageDialog(null, "No hay campos creados! XTT 435");
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed
    private void Temp() {

        //Table.
        Table.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {

                    int row = Table.getSelectedRow();
                    int column = Table.getSelectedColumn();

                    // resul is the new value to insert in the DB
                    String resul = Table.getValueAt(row, column).toString();
                    // id is the primary key of my DB
                    String id = Table.getValueAt(row, 0).toString();

                    // update is my method to update. Update needs the id for
                    // the where clausule. resul is the value that will receive
                    // the cell and you need column to tell what to update.
                    System.out.println("Row" + row + "Column" + column);

                }
            }
        });
    }

    private void CrearRegistro() {
        TableModel model = Table.getModel();
        DefaultTableModel modelo = (DefaultTableModel) model;

        Object[] insertarray = new Object[metadata.getCampos().size()];
        for (int i = 0; i < metadata.getCampos().size(); i++) {
            boolean exito = false;
            while (exito == false) {
                try {
                    String temp = JOptionPane.showInputDialog(null, "Ingrese: " + metadata.getCampos().get(i).toString() + " Tipo: " + metadata.getTipos().get(i).toString());
                    if (Integer.parseInt(metadata.getTipos().get(i).toString()) == 1) {
                        insertarray[i] = Integer.parseInt(temp);
                    } else if (Integer.parseInt(metadata.getTipos().get(i).toString()) == 2) {
                        insertarray[i] = Long.parseLong(temp);
                    } else if (Integer.parseInt(metadata.getTipos().get(i).toString()) == 3) {
                        insertarray[i] = temp;
                    } else if (Integer.parseInt(metadata.getTipos().get(i).toString()) == 4) {
                        insertarray[i] = temp.charAt(0);
                    }
                    exito = true;
                } catch (Exception e) {
                    System.out.println("Crash Prevented // Create Register Function");
                }
            }

        }
        ArrayList TrimaExport2 = new ArrayList();

        for (int i = 0; i < insertarray.length; i++) {
            TrimaExport2.add(insertarray[i]);
        }
        //Export to Trima in this line.
        Registro temporal = new Registro(Integer.parseInt(insertarray[0].toString()));

        if (metadata.getArbolB().search(temporal) == null) {
            metadata.getArbolB().insert(temporal);
            modelo.addRow(insertarray);
            System.out.println(temporal);
            try {
                EscribirDatosRegistro(TrimaExport2);//Send Array to Trima
                BuscarDatoArchivo(temporal);
            } catch (Exception ex) {
                //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
            Table.setModel(modelo);
            System.out.println(metadata.getArbolB().search(temporal));

        } else {
            JOptionPane.showMessageDialog(null, "Una Instancia del Registro ya existe.");
        }

        //Temp();
    }
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        SaveFile();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        System.exit(0);

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    public void SaveFile() {
        JOptionPane.showMessageDialog(null, "Su file se ha guardado exitosamente!");
    }

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:\
        /*System.out.println(" Pene");
        int Row = Table.getEditingRow();
        int Column = Table.getEditingColumn();
        System.out.println("Row:"+Row);
        System.out.println("Column:"+Column);*/
    }//GEN-LAST:event_TableFocusLost

    private void TablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TablePropertyChange
        // TODO add your handling code here:
        try {
            if (Table.isEditing() && tablemodification == 0) {
                mode=-1;
                tablemodification = 1;
                System.out.println("Cell value being edited.");

                CellEditor x = Table.getCellEditor();
                oldcellvalue = Table.getValueAt(Table.getSelectedRow(), Table.getSelectedColumn());
                currentRow = Table.getSelectedRow();
                currentColumn = Table.getSelectedColumn();
                System.out.println("Valor Original:" + oldcellvalue);
                x.addCellEditorListener(new CellEditorListener() {
                    @Override
                    public void editingStopped(ChangeEvent e) { //When editing stops compare original value and type to the new value and type.
                        Object temp = x.getCellEditorValue(); //Extract new value.

                        if (tablemodification == 1) { //Simple bandera.
                            tablemodification = 0; //Making sure bandera resets
                            if (oldcellvalue.toString().equals(temp.toString())) { //If the same value is detected
                                System.out.println("Same Cell Value detected: " + oldcellvalue); // Dont change anything
                                System.out.println("No export Requiered.");
                            } else { // If new value is detected: 
                                System.out.println("Different Cell Value Detected:" + temp);
                                System.out.println("Column: " + currentColumn);
                                //DefaultTableModel temasdasd = Table.getModel();
                                int type = Integer.parseInt(metadata.getTipos().get(currentColumn).toString()); //Extract the type of the value from metadata that it should have.
                                try { // Attempt to convert it to see if it is workable.

                                    Object assignation = null; //Basicamente solo es para que ocurra la exception validadora pero no hace nada.
                                    if (type == 1) {
                                        assignation = Integer.parseInt(temp.toString());
                                    } else if (type == 2) {
                                        assignation = Long.parseLong(temp.toString());
                                    } else if (type == 3) {
                                        assignation = temp.toString();
                                    } else if (type == 4) {
                                        assignation = temp.toString().charAt(0);
                                    }
                                    ArrayList TrimaExport = new ArrayList(); //ArrayList que se le manda a Trimarchi cuando se detecta un cambio en el registro.
                                    for (int i = 0; i < metadata.getCampos().size(); i++) {
                                        if (i == currentColumn) {
                                            TrimaExport.add(assignation);
                                        } else {
                                            TrimaExport.add(Table.getValueAt(currentRow, i));

                                        }

                                    }
                                    System.out.println("Exportar a Trima valores: " + TrimaExport);
                                    //Apartir de aqui se exporta el nuevo valor del registro. AKA TrimaExport.
                                    //Export to Trima Here.
                                    if (currentColumn == 0) {
                                        JOptionPane.showMessageDialog(null, " No se puede modificar la primary key");
                                        Table.setValueAt(oldcellvalue, currentRow, currentColumn);
                                    } else {
                                        ModificarDatoArchivo(TrimaExport);//Exportando A Metodo Trima
                                    }

                                } catch (Exception exc) { //If it fails to convert then replace new value with old value.
                                    Table.setValueAt(oldcellvalue, currentRow, currentColumn);
                                    JOptionPane.showMessageDialog(null, "Incompatible data type. Original value was set.");
                                }

                            }

                        } //End if of modification bandera.

                    }

                    @Override
                    public void editingCanceled(ChangeEvent e) {

                    }
                });

                x.removeCellEditorListener(Table);

                /*tablemodification = 1;
            currentRow = Table.getEditingRow();
            currentColumn = Table.getEditingColumn();
            oldcellvalue = Table.getValueAt(currentRow, currentColumn).toString();
            System.out.println("Original Value: " + oldcellvalue);*/
            }
        } catch (Exception e) {
            System.out.println("FATAL ERROR. Expect Table Failures");
        }

        /*else if (tablemodification == 1) {
            tablemodification = 0;
            if (currentRow == Table.getSelectedRow() && currentColumn == Table.getSelectedColumn()) {
                if (oldcellvalue != Table.getValueAt(currentRow, currentColumn).toString()) {
                    System.out.println("Different Cell value detected.");
                } else {
                    System.out.println("Same Cell value detected.");
                }
                System.out.println("Cell value finished editing.");
            }

        }*/
    }//GEN-LAST:event_TablePropertyChange

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        LoadFile();
        if (FileSuccess == 1) {
            metadata = new Metadata();
            BuildTable(metadata, 1);
            try {
                CargarMetadatos();
                BuildTable(metadata, 0);
                LeerDatosRegistro();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println(metadata.getCampos().get(0));

        } else {

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void LoadFile() {
        FileSuccess = 0;
        String direction;
        //Creo un nuevo JFileChooser para que eliga donde guardar.
        //Le digo que aparezca en el home del proyecto .. Crea un problema que la Metadata se puede guardar en cualquier sitio.
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("./"));
        FileNameExtensionFilter data = new FileNameExtensionFilter("DAT FILE", "dat");
        fileChooser.setFileFilter(data);
        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) { //Cuando le da guardar
            //System.out.println(fileChooser.getCurrentDirectory().toString());
            File file = null;
            // FileOutputStream fos = null;
            // ObjectOutputStream ous = null;
            try {
                if (fileChooser.getFileFilter().getDescription().equals("DAT FILE")) { //Chequea si lo que quiere guardar es DAT FILE
                    direction = fileChooser.getSelectedFile().getPath() + ".dat";
                    file = fileChooser.getSelectedFile();
                    this.file = file;
                    JOptionPane.showMessageDialog(null, "Sucess!");
                    System.out.println("Length of Loaded File: " + (file.length() - 4)); //SIZE MENOS BUFFER.
                    FileSuccess = 1;
                } else {
                    JOptionPane.showMessageDialog(this, "Unable to Load. Use DAT FILE.");
                }
                // fos = new FileOutputStream(file);
                //  ous = new ObjectOutputStream(fos);
                //  ous.flush(); //Lo oficializo

                // RAfile=new RandomAccessFile(file,"rw");
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Something Went Wrong! Contact System Administrator.");
            }
            try {
                //ous.close();
                // fos.close();
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Fatal error closing files.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Operation aborted!");
        }
    }


    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        if (mode == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione un Registro para borrar.");
        } else {
            try {
                System.out.println("Se eliminara el registro: " + rowRemoval);
                ArrayList ExportTrima3 = new ArrayList();
                for (int i = 0; i < metadata.getCampos().size(); i++) {
                    ExportTrima3.add(Table.getValueAt(rowRemoval, i));
                }
                mode = -1;
                //Exportar a Trima Aqui.
                System.out.println(metadata.getNumregistros());
                metadata.subtractnumregistros();
                TableModel modelo = Table.getModel();
                DefaultTableModel model = (DefaultTableModel) modelo;
                model.removeRow(rowRemoval);
                Table.setModel(modelo);
            } catch (Exception e) {
                System.out.println("Problem deleting file");
            }

        }

    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        System.out.println("TOUCHING AUFHAKJDFA;KDHFA;DHFKAJHSDFKAHDFKJAHDFAJDFH");
        rowRemoval = Table.getSelectedRow();
        mode = 0;
        System.out.println("Removal on:" + rowRemoval);
    }//GEN-LAST:event_TableMouseClicked

    private void BuildTable(Metadata metadata, int funcion) {
        if (funcion == 0) { //Instruction 0 lets the Table Builder know it should only change headers.
            Object[] campos = metadata.getCampos().toArray();
            DefaultTableModel tabla = new DefaultTableModel();
            tabla.setColumnCount(campos.length);
            tabla.setColumnIdentifiers(campos);
            Table.setModel(tabla);
            //Table.updateUI();
        } else if (funcion == 1) { //Instruction 1 lets the Table Builder clean all models loaded.
            Table.setModel(cleanTable);
        }

    }

    private void TableInsertRegistro() {
        TableModel model = Table.getModel();
        DefaultTableModel modelo = (DefaultTableModel) model;
        metadata.addnumregistros();
        System.out.println("ENTRO a LA Table??" + KennethExport2.get(0));
        Object insertArray[] = KennethExport2.toArray();
        System.out.println("POS2..." + insertArray[1]);
        modelo.addRow(insertArray);
        System.out.println("SUPER PENE");
        Table.setModel(model);
        System.out.println("Completeed.");
    }

    private void CreateFile() {
        //Borro lo que tengo en la metadata
        //metadata = new Metadata();
        //Le digo a la tabla que se borre.
        //BuildTable(metadata, 1);
        //OUTPUT TESTS ----- IGNORE

        // Output Tests ------ IGNORE.
        FileSuccess = 0;
        String direction;
        //Creo un nuevo JFileChooser para que eliga donde guardar.
        //Le digo que aparezca en el home del proyecto .. Crea un problema que la Metadata se puede guardar en cualquier sitio.
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("./"));
        FileNameExtensionFilter data = new FileNameExtensionFilter("DAT FILE", "dat");
        fileChooser.setFileFilter(data);
        int seleccion = fileChooser.showSaveDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) { //Cuando le da guardar
            //System.out.println(fileChooser.getCurrentDirectory().toString());
            File file = null;
            FileOutputStream fos = null;
            ObjectOutputStream ous = null;
            try {
                if (fileChooser.getFileFilter().getDescription().equals("DAT FILE")) { //Chequea si lo que quiere guardar es DAT FILE
                    direction = fileChooser.getSelectedFile().getPath().toString() + ".dat";
                    System.out.println(direction);
                    direction = direction.replace(".dat","");
                    System.out.println(direction);
                    direction += ".dat";
                    System.out.println(direction);
                    file = new File(direction);
                    if (file.length() == 0) { //Revisa que este vacio.                    
                        this.file = new File(direction);
                        JOptionPane.showMessageDialog(this, "Success!\n All unsaved progress was Lost!");

                    } else if (file.exists()) { //Si ya existe entonces lo vuelve a crear. PERO VACIO.
                        file.delete();
                        file.createNewFile();
                        this.file = new File(direction);
                        JOptionPane.showMessageDialog(this, "File OverWritten, New Length: " + file.length());
                    }
                    FileSuccess = 1;
                } else {
                    JOptionPane.showMessageDialog(this, "Unable to save. Use DAT FILE.");
                }
                fos = new FileOutputStream(file);
                ous = new ObjectOutputStream(fos);
                ous.flush(); //Lo oficializo

                System.out.println("FILE LENGTH: " + (file.length() - 4)); //SIZE MENOS BUFFER.

                // RAfile=new RandomAccessFile(file,"rw");
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Something Went Wrong! Contact System Administrator.");
            }
            try {
                ous.close();
                fos.close();
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Fatal error closing files.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Operation aborted!");
        }
        //End of FileChooserIf 
    }

    private void NewFile() {
        // Protocolo de creacion de Metadata. 
        // SE LE ADVIERTE AL USUARIO QUE INFORMACION ACTUAL SERA BORRADA.
        // 1. Se le pide el nombre de la metadata al usuario.
        // 2. Se crea Metadata.
        String direction; // Nombre del archivo .dat que se creara/
        int option = JOptionPane.showConfirmDialog(this, "Do you want to save your current progress?");
        if (option == JOptionPane.NO_OPTION) { //Si no quiere guardar lo que hizo.
            CreateFile(); //Como no quiere guardar solo lo creo.
            if (FileSuccess == 1) {
                metadata = new Metadata();
                BuildTable(metadata, 1);
            }

        } else if (option == JOptionPane.YES_OPTION) {
            SaveFile();
            //una vez se guarda la info se crea el archivo.
            //CreateFile();

        } else {
            System.out.println("Operation cancelled");
        }
    }

    public void CargarMetadatos() throws ClassNotFoundException {
        try {
            System.out.println("????????????????");
            RAfile = new RandomAccessFile(file, "rw");
            int tamaño = RAfile.readInt();
            System.out.println(tamaño + " SIZEEEEEEEE");
            byte[] data = new byte[tamaño];
            RAfile.read(data);
            ByteArrayInputStream in = new ByteArrayInputStream(data);
            ObjectInputStream read = new ObjectInputStream(in);
            metadata = (Metadata) read.readObject();//read the byte array
            metadata.setSizeMeta(tamaño);
        } catch (IOException ex) {
            Logger.getLogger(Trima.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void EscribirMetadatos() throws IOException {
        RAfile = new RandomAccessFile(file, "rw");
        ByteArrayOutputStream obArray = new ByteArrayOutputStream();
        ObjectOutputStream objeto = new ObjectOutputStream(obArray);
        objeto.writeObject(metadata);
        byte[] datos = obArray.toByteArray();//makes an array of bytes from the object
        RAfile.seek(0);//Place pointe at the beggining of the file
        RAfile.writeInt(datos.length);
        RAfile.write(datos);
        //RAfile.setLength(7500);
        metadata.setSizeMeta((int) RAfile.length());
        System.out.println("ESTE ES EL SIZE DE LOS METADATOS..." + datos.length);

    }

    public void EscribirDatosRegistro(ArrayList<Object> info_registro) throws IOException {
        Data datos = new Data();
        Registro temporal = new Registro(Integer.parseInt(info_registro.get(0).toString()));
        long byteOffset = RAfile.length();
        System.out.println("ByteOffset+:: " + byteOffset);
        Bnode d = metadata.getArbolB().search(temporal);
        int x = searchEnNodo(d, temporal.getKey());

        d.key[x].setByteOffset(byteOffset);
        datos.setDatos(info_registro);//Alistando para guardar arraylist de objetos en el archivo
        datos.setUbicacion(byteOffset);//clase datos que guarda ubiacion

        ByteArrayOutputStream obArray = new ByteArrayOutputStream();
        ObjectOutputStream objeto = new ObjectOutputStream(obArray);
        objeto.writeObject(datos);
        byte[] dat = obArray.toByteArray();//makes an array of bytes from the object
        RAfile.seek(byteOffset);//Place pointe at the beggining of the file
        RAfile.writeInt(dat.length);
        RAfile.write(dat);
        System.out.println("ESTE ES EL SIZE DEL REGISTRO..." + dat.length);
    }

    public void LeerDatosRegistro() throws ClassNotFoundException {
        try {//Este metodo quedara available cuando Se habilite la fncion Load File
            System.out.println("=========================================");
            System.out.println("Cargando Registros a la Table");

            RAfile = new RandomAccessFile(file, "rw");
            RAfile.seek(0);
            int tamaño = RAfile.readInt();
            RAfile.seek(tamaño + 4);
            //System.out.println(tamaño);
            boolean eliminado = false;//boolen que marca que el registro leido esta eliminado
            while (RAfile.getFilePointer() < RAfile.length()) {
                eliminado = false;
                tamaño = RAfile.readInt();
                System.out.println("Newwww Tamaño" + tamaño);
                byte[] data = new byte[tamaño];
                RAfile.read(data);
                ByteArrayInputStream in = new ByteArrayInputStream(data);
                ObjectInputStream read = new ObjectInputStream(in);
                Data d = (Data) read.readObject();//guardo el array de bytes en una variable temporal
                if (d.getSize_alter().contains("*")) {//If que verifica que si el registro esta eliminado
                    eliminado = true;//si entra significa que si
                } else {//entra al else cuando NO ETSA ELIMINADO
                    KennethExport2 = new ArrayList<>();
                    Registro temporal = new Registro(d.getKey());
                    temporal.setByteOffset(d.getUbicacion());
                    metadata.getArbolB().insert(temporal);
                    for (int i = 0; i < d.getDatos().size(); i++) {
                        KennethExport2.add(d.getDatos().get(i));
                        System.out.print("qp2");
                    }
                    TableInsertRegistro();//Inserto en la tabla
                    System.out.println("ALOOOO");
//Agrego un registro con el mismo formato que me fue enviado para implementarlo en la table
                    //Arraylist Lista para agarrar Registros
                    //GRAB Global Array!!!! XD 
                }

            }

        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public Data BuscarDatoArchivo(Registro r) throws IOException, ClassNotFoundException {//Metodo para Buscar El Registro en el Archivo
        if (metadata.getArbolB().search(r) != null) {//Solo uso la key del Arbol y lo pido de forma constante al Randomaccesfile
            Bnode contenido = metadata.getArbolB().search(r);
            int pos = searchEnNodo(contenido, r.getKey());
            long byteOffset = contenido.key[pos].byteOffset;
            RAfile.seek(byteOffset);
            int tamaño = RAfile.readInt();
            byte[] data = new byte[tamaño];
            RAfile.read(data);
            ByteArrayInputStream in = new ByteArrayInputStream(data);
            ObjectInputStream read = new ObjectInputStream(in);
            Data d = (Data) read.readObject();//guardo el array de bytes en una variable temporal

            return d;
        } else {
            System.out.println("No se encontro el Nodo");

            return null;
        }

    }

    public void ModificarDatoArchivo(ArrayList<Object> TrimaExport) {
        try {
            Registro temporal = new Registro(Integer.parseInt(TrimaExport.get(0).toString()));
            if (BuscarDatoArchivo(temporal) != null) {
                System.out.println("===========================================================");
                System.out.println("MODIFICANDO NODO...");
                Data temp = BuscarDatoArchivo(temporal);
                RAfile.seek(temp.ubicacion);
                int size_act = RAfile.readInt();//Este es el tamaño actual

                Data new_size = new Data();
                new_size.setKey((int) TrimaExport.get(0));
                new_size.setDatos(TrimaExport);
                new_size.setUbicacion(temp.getUbicacion());
                ByteArrayOutputStream obArray = new ByteArrayOutputStream();
                ObjectOutputStream objeto = new ObjectOutputStream(obArray);
                objeto.writeObject(new_size);
                byte[] dat = obArray.toByteArray();

                System.out.println("NEW SIZE" + dat.length + " ---- " + "SIZE ORIGINAL:" + size_act);
                if (dat.length <= size_act) {//Este if permite entrar si es mas peqeño
                    System.out.println("EL NUEVO REGISTRO ES MAS PEQUEÑO SE ADAPATARA PARA QUE SEAN DEL MISMO TAMAÑO SI ES NECESARIO");
                    for (int i = 0; i < (size_act - dat.length); i++) {//El for lo que hace es meter caracteres para igualar los size de ambos
                        new_size.setSize_alter(new_size.getSize_alter() + "|");
                    }//Igualo los size para solo pegar el nuevo dato sobre el viejo y asi no generar errores
                    obArray = new ByteArrayOutputStream();
                    objeto = new ObjectOutputStream(obArray);
                    objeto.writeObject(new_size);
                    dat = obArray.toByteArray();//Actulizando 
                    RAfile.write(dat);
                    System.out.println("NEW SIZE" + dat.length + " ---- " + "SIZE ORIGINAL:" + size_act);
                } else {
                    System.out.println("EL NUEVO REGISTRO ES MUY GRANDE IRA AL FINAL DEL ARCHIVO");
                    temp.setSize_alter("*"); //Pone un aterisco que marca ese registro o dato como eliminado
                    obArray = new ByteArrayOutputStream();
                    objeto = new ObjectOutputStream(obArray);
                    objeto.writeObject(temp);
                    byte[] dat2 = obArray.toByteArray();
                    RAfile.write(dat2);

                    //ESPACIO RESERVADO PARA EL AVAILlIST
                    long byteOffset = RAfile.length();
                    RAfile.seek(byteOffset);//ahora nos vamos al final de archivo a poner el El registro ya que es muy grande
                    RAfile.writeInt(dat.length);
                    RAfile.write(dat);

                    Bnode tmp = metadata.getArbolB().search(temporal);
                    int ubicacion = searchEnNodo(tmp, temp.getKey());
                    tmp.key[ubicacion].setByteOffset(byteOffset);

                    //Espera implementarse mas adelante
                }
                System.out.println("OPERACION REALIZADA EXITOSAMENTE");
                System.out.println("===========================================================");
            }
        } catch (Exception ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public int searchEnNodo(Bnode d, int key) {//Como mi arbol devulve el nodo en que se ubica el Registro
        int pos = 0;
        //Este Metodo me dije la posicion en la que se encuentra en el Nodo.
        for (int i = 0; i < d.n; i++) {//for que busca en el nodo la llave y le agrega el byte donde se ubica en el archivo
            if (d.key[i].getKey() == key) {
                break;
            } else {
                pos++;
            }
        }
        return pos;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    int num = 0; //
    Kenneth metodos = new Kenneth(); //Import Program Abilities developed by Kenneth
    Metadata metadata; //Global Variable for metadata handling. May be null sometimes.
    TableModel cleanTable; //Clean Table model for when program needs to return to original state.
    File file; // Global variable for binary file handling. May be null sometimes.
    ArrayList<Object> KennethExport2;
    int tablemodification = 0; //Int bandera , Table awareness for modification.
    Object oldcellvalue; // Old cell value that is being modified live on table. Might be null.
    int currentRow;
    RandomAccessFile RAfile;
    int currentColumn;
    int FileSuccess;
    int mode = -1;
    int rowRemoval;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
